SELECT(2)                  Linux Programmer's Manual                 SELECT(2)

NNAAMMEE
       select,  pselect,  FD_CLR,  FD_ISSET, FD_SET, FD_ZERO - synchronous I/O
       multiplexing

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//sseelleecctt..hh>>

       iinntt sseelleecctt((iinntt _n_f_d_s,, ffdd__sseett **_r_e_a_d_f_d_s,, ffdd__sseett **_w_r_i_t_e_f_d_s,,
                  ffdd__sseett **_e_x_c_e_p_t_f_d_s,, ssttrruucctt ttiimmeevvaall **_t_i_m_e_o_u_t));;

       vvooiidd FFDD__CCLLRR((iinntt _f_d,, ffdd__sseett **_s_e_t));;
       iinntt  FFDD__IISSSSEETT((iinntt _f_d,, ffdd__sseett **_s_e_t));;
       vvooiidd FFDD__SSEETT((iinntt _f_d,, ffdd__sseett **_s_e_t));;
       vvooiidd FFDD__ZZEERROO((ffdd__sseett **_s_e_t));;

       iinntt ppsseelleecctt((iinntt _n_f_d_s,, ffdd__sseett **_r_e_a_d_f_d_s,, ffdd__sseett **_w_r_i_t_e_f_d_s,,
                   ffdd__sseett **_e_x_c_e_p_t_f_d_s,, ccoonnsstt ssttrruucctt ttiimmeessppeecc **_t_i_m_e_o_u_t,,
                   ccoonnsstt ssiiggsseett__tt **_s_i_g_m_a_s_k));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ppsseelleecctt(): _POSIX_C_SOURCE >= 200112L

DDEESSCCRRIIPPTTIIOONN
       sseelleecctt() allows a program to monitor multiple file descriptors, waiting
       until one or more of the file descriptors become "ready" for some class
       of I/O operation (e.g., input possible).  A file descriptor is  consid‐
       ered  ready  if it is possible to perform a corresponding I/O operation
       (e.g., rreeaadd(2), or a sufficiently small wwrriittee(2)) without blocking.

       sseelleecctt() can monitor only file descriptors numbers that are  less  than
       FFDD__SSEETTSSIIZZEE;  ppoollll(2)  and  eeppoollll(7)  do  not have this limitation.  See
       BUGS.

   FFiillee ddeessccrriippttoorr sseettss
       The principal arguments of sseelleecctt() are three "sets" of  file  descrip‐
       tors  (declared  with  the type _f_d___s_e_t), which allow the caller to wait
       for three classes of events on the specified set of  file  descriptors.
       Each  of  the  _f_d___s_e_t arguments may be specified as NULL if no file de‐
       scriptors are to be watched for the corresponding class of events.

       NNoottee wweellll: Upon return, each of the file descriptor sets is modified in
       place  to indicate which file descriptors are currently "ready".  Thus,
       if using sseelleecctt() within a loop, the sets _m_u_s_t _b_e _r_e_i_n_i_t_i_a_l_i_z_e_d  before
       each  call.  The implementation of the _f_d___s_e_t arguments as value-result
       arguments is a design error that is avoided in ppoollll(2) and eeppoollll(7).

       The contents of a file descriptor set can be manipulated using the fol‐
       lowing macros:

       FFDD__ZZEERROO()
              This  macro  clears (removes all file descriptors from) _s_e_t.  It
              should be employed as the first step in initializing a file  de‐
              scriptor set.

       FFDD__SSEETT()
              This  macro  adds  the file descriptor _f_d to _s_e_t.  Adding a file
              descriptor that is already present in the set is  a  no-op,  and
              does not produce an error.

       FFDD__CCLLRR()
              This  macro removes the file descriptor _f_d from _s_e_t.  Removing a
              file descriptor that is not present in the set is a  no-op,  and
              does not produce an error.

       FFDD__IISSSSEETT()
              sseelleecctt()  modifies  the  contents  of  the sets according to the
              rules described below.  After calling sseelleecctt(),  the  FFDD__IISSSSEETT()
              macro  can be used to test if a file descriptor is still present
              in a set.  FFDD__IISSSSEETT() returns nonzero if the file descriptor  _f_d
              is present in _s_e_t, and zero if it is not.

   AArrgguummeennttss
       The arguments of sseelleecctt() are as follows:

       _r_e_a_d_f_d_s
              The  file descriptors in this set are watched to see if they are
              ready for reading.  A file descriptor is ready for reading if  a
              read  operation will not block; in particular, a file descriptor
              is also ready on end-of-file.

              After sseelleecctt() has returned, _r_e_a_d_f_d_s will be cleared of all file
              descriptors except for those that are ready for reading.

       _w_r_i_t_e_f_d_s
              The  file descriptors in this set are watched to see if they are
              ready for writing.  A file descriptor is ready for writing if  a
              write  operation  will  not  block.  However, even if a file de‐
              scriptor indicates as writable, a large write may still block.

              After sseelleecctt() has returned, _w_r_i_t_e_f_d_s will  be  cleared  of  all
              file descriptors except for those that are ready for writing.

       _e_x_c_e_p_t_f_d_s
              The  file  descriptors  in this set are watched for "exceptional
              conditions".  For examples of some exceptional  conditions,  see
              the discussion of PPOOLLLLPPRRII in ppoollll(2).

              After  sseelleecctt()  has  returned, _e_x_c_e_p_t_f_d_s will be cleared of all
              file descriptors except for those for which an exceptional  con‐
              dition has occurred.

       _n_f_d_s   This  argument  should  be  set to the highest-numbered file de‐
              scriptor in any of the three sets, plus 1.  The  indicated  file
              descriptors  in  each set are checked, up to this limit (but see
              BUGS).

       _t_i_m_e_o_u_t
              The _t_i_m_e_o_u_t argument is a _t_i_m_e_v_a_l structure (shown  below)  that
              specifies  the interval that sseelleecctt() should block waiting for a
              file descriptor to become ready.  The call will block until  ei‐
              ther:

              • a file descriptor becomes ready;

              • the call is interrupted by a signal handler; or

              • the timeout expires.

              Note  that the _t_i_m_e_o_u_t interval will be rounded up to the system
              clock granularity, and kernel scheduling delays  mean  that  the
              blocking interval may overrun by a small amount.

              If  both fields of the _t_i_m_e_v_a_l structure are zero, then sseelleecctt()
              returns immediately.  (This is useful for polling.)

              If _t_i_m_e_o_u_t is specified as NULL,  sseelleecctt()  blocks  indefinitely
              waiting for a file descriptor to become ready.

   ppsseelleecctt(())
       The  ppsseelleecctt()  system  call allows an application to safely wait until
       either a file descriptor becomes ready or until a signal is caught.

       The operation of sseelleecctt() and ppsseelleecctt() is identical, other than  these
       three differences:

       • sseelleecctt()  uses  a  timeout that is a _s_t_r_u_c_t _t_i_m_e_v_a_l (with seconds and
         microseconds), while ppsseelleecctt() uses a _s_t_r_u_c_t _t_i_m_e_s_p_e_c  (with  seconds
         and nanoseconds).

       • sseelleecctt()  may  update  the _t_i_m_e_o_u_t argument to indicate how much time
         was left.  ppsseelleecctt() does not change this argument.

       • sseelleecctt() has no _s_i_g_m_a_s_k argument, and  behaves  as  ppsseelleecctt()  called
         with NULL _s_i_g_m_a_s_k.

       _s_i_g_m_a_s_k  is  a  pointer to a signal mask (see ssiiggpprrooccmmaasskk(2)); if it is
       not NULL, then ppsseelleecctt() first replaces the current signal mask by  the
       one  pointed  to  by _s_i_g_m_a_s_k, then does the "select" function, and then
       restores the original signal mask.  (If _s_i_g_m_a_s_k  is  NULL,  the  signal
       mask is not modified during the ppsseelleecctt() call.)

       Other than the difference in the precision of the _t_i_m_e_o_u_t argument, the
       following ppsseelleecctt() call:

           ready = pselect(nfds, &readfds, &writefds, &exceptfds,
                           timeout, &sigmask);

       is equivalent to _a_t_o_m_i_c_a_l_l_y executing the following calls:

           sigset_t origmask;

           pthread_sigmask(SIG_SETMASK, &sigmask, &origmask);
           ready = select(nfds, &readfds, &writefds, &exceptfds, timeout);
           pthread_sigmask(SIG_SETMASK, &origmask, NULL);

       The reason that ppsseelleecctt() is needed is that if one wants  to  wait  for
       either  a  signal  or  for  a  file descriptor to become ready, then an
       atomic test is needed to prevent race conditions.  (Suppose the  signal
       handler  sets  a  global  flag and returns.  Then a test of this global
       flag followed by a call of sseelleecctt() could hang indefinitely if the sig‐
       nal arrived just after the test but just before the call.  By contrast,
       ppsseelleecctt() allows one to first block signals, handle  the  signals  that
       have  come  in,  then call ppsseelleecctt() with the desired _s_i_g_m_a_s_k, avoiding
       the race.)

   TThhee ttiimmeeoouutt
       The _t_i_m_e_o_u_t argument for sseelleecctt() is a structure of the following type:

           struct timeval {
               time_t      tv_sec;         /* seconds */
               suseconds_t tv_usec;        /* microseconds */
           };

       The corresponding argument for ppsseelleecctt() has the following type:

           struct timespec {
               time_t      tv_sec;         /* seconds */
               long        tv_nsec;        /* nanoseconds */
           };

       On Linux, sseelleecctt() modifies _t_i_m_e_o_u_t to reflect the amount of  time  not
       slept; most other implementations do not do this.  (POSIX.1 permits ei‐
       ther behavior.)  This causes problems both when Linux code which  reads
       _t_i_m_e_o_u_t  is  ported to other operating systems, and when code is ported
       to Linux that reuses a _s_t_r_u_c_t _t_i_m_e_v_a_l for multiple sseelleecctt()s in a  loop
       without  reinitializing it.  Consider _t_i_m_e_o_u_t to be undefined after ssee‐‐
       lleecctt() returns.

RREETTUURRNN VVAALLUUEE
       On success, sseelleecctt() and ppsseelleecctt() return the number of  file  descrip‐
       tors  contained in the three returned descriptor sets (that is, the to‐
       tal number of bits that are set in _r_e_a_d_f_d_s, _w_r_i_t_e_f_d_s, _e_x_c_e_p_t_f_d_s).   The
       return  value  may  be  zero if the timeout expired before any file de‐
       scriptors became ready.

       On error, -1 is returned, and _e_r_r_n_o is set to indicate the  error;  the
       file descriptor sets are unmodified, and _t_i_m_e_o_u_t becomes undefined.

EERRRROORRSS
       EEBBAADDFF  An  invalid file descriptor was given in one of the sets.  (Per‐
              haps a file descriptor that was already closed, or one on  which
              an error has occurred.)  However, see BUGS.

       EEIINNTTRR  A signal was caught; see ssiiggnnaall(7).

       EEIINNVVAALL _n_f_d_s  is  negative  or  exceeds the RRLLIIMMIITT__NNOOFFIILLEE resource limit
              (see ggeettrrlliimmiitt(2)).

       EEIINNVVAALL The value contained within _t_i_m_e_o_u_t is invalid.

       EENNOOMMEEMM Unable to allocate memory for internal tables.

VVEERRSSIIOONNSS
       ppsseelleecctt() was added to Linux in kernel 2.6.16.   Prior  to  this,  ppssee‐‐
       lleecctt() was emulated in glibc (but see BUGS).

CCOONNFFOORRMMIINNGG TTOO
       sseelleecctt()  conforms  to POSIX.1-2001, POSIX.1-2008, and 4.4BSD (sseelleecctt()
       first appeared in 4.2BSD).  Generally portable to/from non-BSD  systems
       supporting  clones  of  the  BSD socket layer (including System V vari‐
       ants).  However, note that the  System V  variant  typically  sets  the
       timeout variable before returning, but the BSD variant does not.

       ppsseelleecctt() is defined in POSIX.1g, and in POSIX.1-2001 and POSIX.1-2008.

NNOOTTEESS
       An  _f_d___s_e_t is a fixed size buffer.  Executing FFDD__CCLLRR() or FFDD__SSEETT() with
       a value of _f_d that is negative or is equal to or larger than FFDD__SSEETTSSIIZZEE
       will result in undefined behavior.  Moreover, POSIX requires _f_d to be a
       valid file descriptor.

       The operation of sseelleecctt() and ppsseelleecctt() is not affected by  the  OO__NNOONN‐‐
       BBLLOOCCKK flag.

       On  some other UNIX systems, sseelleecctt() can fail with the error EEAAGGAAIINN if
       the system fails to allocate  kernel-internal  resources,  rather  than
       EENNOOMMEEMM  as Linux does.  POSIX specifies this error for ppoollll(2), but not
       for sseelleecctt().  Portable programs may wish to check for EEAAGGAAIINN and loop,
       just as with EEIINNTTRR.

   TThhee sseellff--ppiippee ttrriicckk
       On  systems  that  lack  ppsseelleecctt(), reliable (and more portable) signal
       trapping can be achieved using the self-pipe trick.  In this technique,
       a  signal  handler writes a byte to a pipe whose other end is monitored
       by sseelleecctt() in the main program.   (To  avoid  possibly  blocking  when
       writing  to  a pipe that may be full or reading from a pipe that may be
       empty, nonblocking I/O is used when reading from  and  writing  to  the
       pipe.)

   EEmmuullaattiinngg uusslleeeepp((33))
       Before  the  advent of uusslleeeepp(3), some code employed a call to sseelleecctt()
       with all three sets empty, _n_f_d_s zero,  and  a  non-NULL  _t_i_m_e_o_u_t  as  a
       fairly portable way to sleep with subsecond precision.

   CCoorrrreessppoonnddeennccee bbeettwweeeenn sseelleecctt(()) aanndd ppoollll(()) nnoottiiffiiccaattiioonnss
       Within the Linux kernel source, we find the following definitions which
       show the correspondence between the readable, writable, and exceptional
       condition  notifications  of  sseelleecctt() and the event notifications pro‐
       vided by ppoollll(2) and eeppoollll(7):

           #define POLLIN_SET  (EPOLLRDNORM | EPOLLRDBAND | EPOLLIN |
                                EPOLLHUP | EPOLLERR)
                              /* Ready for reading */
           #define POLLOUT_SET (EPOLLWRBAND | EPOLLWRNORM | EPOLLOUT |
                                EPOLLERR)
                              /* Ready for writing */
           #define POLLEX_SET  (EPOLLPRI)
                              /* Exceptional condition */

   MMuullttiitthhrreeaaddeedd aapppplliiccaattiioonnss
       If a file descriptor being monitored by sseelleecctt() is closed  in  another
       thread,  the result is unspecified.  On some UNIX systems, sseelleecctt() un‐
       blocks and returns, wi